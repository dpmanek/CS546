bands:
{
    _id: ObjectId, 
    name: string,
    genre: [strings],
    website: string (must contain full url http://www.patrickseats.com),
    recordLabel: string,
    bandMembers: [strings],
    yearFormed: number,
    albums:[], (an array of album objects, you will initialize this field to be an empty array when a band is created),
    overallRating: number (from 0 to 5 this will be a computed average from all the album ratings posted for a band, 
    the initial value of this field will be 0 when a band is created)
}


Example: 
{
    _id: ObjectId("507f1f77bcf86cd799439011"), 
    name: "Pink Floyd",
    genre: ["Progressive Rock", "Psychedelic rock", "Classic Rock"],
    website: "http://www.pinkfloyd.com",
    recordLabel: "EMI",
    bandMembers: ["Roger Waters", "David Gilmour", "Nick Mason", "Richard Wright", "Sid Barrett" ],
    yearFormed: 1965.
    albums: [],
    overallRating: 0
}

The Band Album Sub-document (stored within the bands document)

Modules
People
Quizzes
Course Survey
Record Your Name
Lab 6
Due Saturday by 11:59pm Points 100 Submitting a file upload File Types zip
CS-546 Lab 6
A Band API
For this lab, you will create a simple server that provides an API for someone to Create, Read, Update, and Delete bands and also albums. 

We will be practicing:

Seperating concerns into different modules:
Database connection in one module
Collections defined in another
Data manipulation in another
Practicing the usage of async / await for asynchronous code
Continuing our exercises of linking these modules together as needed
Developing a simple (9 route) API server
Packages you will use:
You will use the mongodb (Links to an external site.) package to hook into MongoDB

You may use the lecture 4 code (Links to an external site.) and the lecture 5 code (Links to an external site.) and lecture 6 code (Links to an external site.) as a guide.

You can read up on express (Links to an external site.) on its home page. Specifically, you may find the API Guide section on requests (Links to an external site.) useful.

You must save all dependencies you use to your package.json file

Folder Structure
You will use the following folder structure for the data and routes module. You may need other files to handle the connection to the database as well.

./
../data/
../data/bands.js
../data/index.js
../data/albums.js
../routes/
../routes/bands.js
../routes/index.js
../routes/albums.js
../app.js
../package.json
I also recommend having your database settings centralized in files, such as:

./
../config/
../config/mongoConnection.js
../config/mongoCollections.js
Database Structure
You will use a database with the following structure:

The database will be called FirstName_LastName_lab6
The collection you use to store bands will be called bands you will store a sub-document of albums
bands 
The schema for a band is as followed:

{
    _id: ObjectId, 
    name: string,
    genre: [strings],
    website: string (must contain full url http://www.patrickseats.com),
    recordLabel: string,
    bandMembers: [strings],
    yearFormed: number,
    albums:[], (an array of album objects, you will initialize this field to be an empty array when a band is created),
    overallRating: number (from 0 to 5 this will be a computed average from all the album ratings posted for a band, 
    the initial value of this field will be 0 when a band is created)
}
The _id field will be automatically generated by MongoDB when a band is inserted, so you do not need to provide it when a band is created.

An example of how Pink Floyd would be stored in the DB:

{
    _id: ObjectId("507f1f77bcf86cd799439011"), 
    name: "Pink Floyd",
    genre: ["Progressive Rock", "Psychedelic rock", "Classic Rock"],
    website: "http://www.pinkfloyd.com",
    recordLabel: "EMI",
    bandMembers: ["Roger Waters", "David Gilmour", "Nick Mason", "Richard Wright", "Sid Barrett" ],
    yearFormed: 1965.
    albums: [],
    overallRating: 0
}
The Band Album Sub-document (stored within the bands document)
{ 
  _id: ObjectId,
  title: string,
  releaseDate: string (string value of a date in MM/DD/YYYY format),
  tracks: array of strings,
  rating: number 1-5 (floats will be accepted as long as they are in the range 1.5 or 4.8 for example. We will only use one decimal place)
}
Example:
{ 
  _id: ObjectId("603d992b919a503b9afb856e"),
  title: "Wish You Were Here",
  releaseDate: "09/12/1975",
  tracks: ["Shine On You Crazy Diamond, Pts. 1-5", "Welcome to the Machine","Have a Cigar (Ft. Roy Harper)", "Wish You Were Here","Shine On You Crazy Diamond, Pts. 6-9"],
  rating: 5
}



///
};
const get = async (albumId) => {
	if (!albumId) throw 'Please provide a valid Album ID';
	if (typeof albumId !== 'string') throw 'Enter Album ID in string format';
	if (albumId.trim().length === 0)
		throw 'Album ID cannot be blank. Please enter a String';
	albumId = albumId.trim();
	if (!ObjectId.isValid(albumId)) throw 'Invalid object ID';

	let band = await Bands();
	/** Logic to find album from band with looops */
	const bandData = await band.findOne({ 'albums._id': ObjectId(albumId) });
	//const bandData = await band.find({ 'albums._id': ObjectId(albumId) });

	//console.log(bandData);
	let finalAlbum = {};
	temp = bandData.albums;

	for (i in temp) {
		if (temp[i]._id.toString() === albumId) {
			finalAlbum = temp[i];
		}
	}
	/** Logic to find album with loops */




	
	finalAlbum._id = finalAlbum._id.toString();
	return finalAlbum;
};